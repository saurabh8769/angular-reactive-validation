import { Validators as AngularValidators } from '@angular/forms';
import { ValidatorDeclaration } from './validator-declaration';
/**
 * Provides a set of validators used by form controls.
 *
 * Code comments have been copied from the Angular source code.
 */
export class Validators {
    static compose(validators) {
        return validators === null ? AngularValidators.compose(validators) : AngularValidators.compose(validators);
    }
    static min(min, message) {
        return Validators.minValidator(min, message);
    }
    static max(max, message) {
        return Validators.maxValidator(max, message);
    }
    static minLength(minLength, message) {
        return Validators.minLengthValidator(minLength, message);
    }
    static maxLength(maxLength, message) {
        return Validators.maxLengthValidator(maxLength, message);
    }
    static pattern(pattern, message) {
        return Validators.patternValidator(pattern, message);
    }
    static required(message) {
        return Validators.requiredValidator(message);
    }
    static requiredTrue(message) {
        return Validators.requiredTrueValidator(message);
    }
    static email(message) {
        return Validators.emailValidator(message);
    }
}
/**
 * No-op validator.
 */
Validators.nullValidator = AngularValidators.nullValidator;
Validators.composeAsync = AngularValidators.composeAsync;
Validators.minValidator = ValidatorDeclaration.wrapSingleArgumentValidator(AngularValidators.min, 'min');
Validators.maxValidator = ValidatorDeclaration.wrapSingleArgumentValidator(AngularValidators.max, 'max');
Validators.minLengthValidator = ValidatorDeclaration.wrapSingleArgumentValidator(AngularValidators.minLength, 'minlength');
Validators.maxLengthValidator = ValidatorDeclaration.wrapSingleArgumentValidator(AngularValidators.maxLength, 'maxlength');
Validators.patternValidator = ValidatorDeclaration.wrapSingleArgumentValidator(AngularValidators.pattern, 'pattern');
Validators.requiredValidator = ValidatorDeclaration.wrapNoArgumentValidator(AngularValidators.required, 'required');
Validators.requiredTrueValidator = ValidatorDeclaration.wrapNoArgumentValidator(AngularValidators.requiredTrue, 'required');
Validators.emailValidator = ValidatorDeclaration.wrapNoArgumentValidator(AngularValidators.email, 'email');
//# sourceMappingURL=data:application/json;base64,